<?xml version="1.0" encoding="utf-8"?>


<!--Very useful info on serialization: https://stackoverflow.com/questions/3038637/how-to-serialize-a-list-with-multiple-data-types-in-c-sharp-from-xml-->
<!--This xml schema will contain the data tied to the Plan files, and their items-->
<!--Meaning they will include definitions for data types-->
<xs:schema id="Plan"
	xmlns="http://tempuri.org/Plan.xsd"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://tempuri.org/Plan.xsd"
    elementFormDefault="qualified"
>
	
	

<!--===============================================TYPE DECLARATIONS=================================================================-->
<!--Declared types in multiple spots because I couldn't figure out how to make eveyrthing work, where I could have one schema of reusable types like 
		UUID or Software Version so I'm going to brute force this for now-->
	
	
<!--Simple Type Definitions-->
	
	<!--Type Definition for UUID-->
	<xs:simpleType name="UUID">
		<!--String will be the base type-->
		<xs:restriction base="xs:string">
			<xs:length value="36"/>
		</xs:restriction>
	</xs:simpleType>
	
	<!--Type Definition for Text/Description Items-->
	<!--I will need to do data validation to check for and swap out any invalid characters when saving and loading data-->
	<xs:simpleType name="TextItem">
		<xs:restriction base="xs:string">
			<!--Honestly, I couldn't think of a good amount of numbers I could use here, so I just typed in a few 9s and called it a day. 
				will change maxLength if necessary, but that's going to require a bit more research than 9:09 PM me has the time for right
				was hoping this would be a bit quicker than it has been-->
			<xs:maxLength value="999999999"/>
		</xs:restriction>
	</xs:simpleType>

	

<!--ComplexTypes-->
	<!--Type Declarations for tasks & subitems-->
		<!--Complex type for Tasks-->
		<xs:complexType name="TaskItem" mixed="true">
			<xs:all>
				<xs:element name="Completion" type="xs:boolean" default="false"/>
				<!--I will need to do data validation to check for and swap out any invalid characters when saving and loading data-->
				<xs:element name="TaskName" type="xs:string"/>
				<xs:element name="UUID" type="UUID"/>
				<xs:element name="SubItemList" type="SubItemList"/>
			</xs:all>
			
		</xs:complexType>

	<!--Type Definition for Date/Duration Items-->
	<xs:complexType name="DateDurationItem" mixed="true">
		<xs:all>
			<!--Parent Item UUID doesn't need to be stored because a reference can be acquired from the parent Task when the data is deserialized-->
			<xs:element name="StartDate" type="xs:date"/>
			<xs:element name="EndDate" type="xs:date"/>
		</xs:all>
	</xs:complexType>
	
	
	<!--Type definition for list of Items controlled by tasks-->
	<xs:complexType name="SubItemList" mixed="true">
		<xs:choice>
			<xs:element name="TaskItems" type="TaskItem" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="TextItems" type="TextItem" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="DateDurationItems" type="DateDurationItem" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:complexType>


	<!--Type definition for storing the version of the software in which something was made/is-->
	<xs:complexType name="SoftwareVersion">
		<xs:sequence>
			<!--Using unsigned byte for this information because I shouldn't need to use them too often, so 0-255 should be fine, and I don't need negative numbers-->
			<!--Storing version info so that can handle version related exceptions and cases where version features conflict and stuff-->
			<!--Ideally - this is another thing I took from making mods for Baldur's Gate 3-->
			<xs:element name="Major" type="xs:unsignedByte" default="0"/>
			<xs:element name="Minor" type="xs:unsignedByte" default="0"/>
			<xs:element name="Revision" type="xs:unsignedByte" default="0"/>
			<xs:element name="Build" type="xs:unsignedByte" default="0"/>
		</xs:sequence>
	</xs:complexType>

	<!--Type Definition for list of task items-->
		<!--couldn't use actual list item because TaskItem is a complexType-->
	<xs:complexType name="PlanTasks">
		<xs:choice>
			<xs:element name="Task" type="TaskItem" minOccurs="0" maxOccurs="unbounded"/>
		</xs:choice>
	</xs:complexType>
	
	
	<!--Data type info/graph https://www.w3.org/TR/xmlschema11-2/#built-in-datatypes-->


	<!--=============================================Element Declarations For a Plan======================================================-->
	<!--Storing the version of the software in which the plan was made-->
	<xs:element name="SoftwareVersion" type="SoftwareVersion"/>


	<!--Name of the plan, in case that is necessary to be saved-->
	<xs:element name="PlanName" type="xs:string"/>
	<!--List of Items in Plan-->
	<xs:element name="TaskList" type="PlanTasks"/>
</xs:schema>
